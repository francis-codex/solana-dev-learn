"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  addKeypairToEnvFile: () => addKeypairToEnvFile,
  getCustomErrorMessage: () => getCustomErrorMessage,
  getExplorerLink: () => getExplorerLink,
  getKeypairFromEnvironment: () => getKeypairFromEnvironment,
  getKeypairFromFile: () => getKeypairFromFile,
  keypairToSecretKeyJSON: () => keypairToSecretKeyJSON,
  requestAndConfirmAirdrop: () => requestAndConfirmAirdrop,
  requestAndConfirmAirdropIfRequired: () => requestAndConfirmAirdropIfRequired
});
module.exports = __toCommonJS(src_exports);
var import_web3 = require("@solana/web3.js");
var import_bs58 = __toESM(require("bs58"));
var import_path = __toESM(require("path"));
var import_promises = require("fs/promises");
var DEFAULT_FILEPATH = "~/.config/solana/id.json";
var keypairToSecretKeyJSON = (keypair) => {
  return JSON.stringify(Array.from(keypair.secretKey));
};
var getCustomErrorMessage = (possibleProgramErrors, errorMessage) => {
  const customErrorExpression = /.*custom program error: 0x(?<errorNumber>[0-9abcdef]+)/;
  let match = customErrorExpression.exec(errorMessage);
  const errorNumberFound = match?.groups?.errorNumber;
  if (!errorNumberFound) {
    return null;
  }
  const errorNumber = parseInt(errorNumberFound, 16);
  return possibleProgramErrors[errorNumber] || null;
};
var encodeURL = (baseUrl, searchParams) => {
  const url = new URL(baseUrl);
  url.search = new URLSearchParams(searchParams).toString();
  return url.toString();
};
var getExplorerLink = (linkType, id, cluster = "mainnet-beta") => {
  const searchParams = {};
  if (cluster !== "mainnet-beta") {
    if (cluster === "localnet") {
      searchParams["cluster"] = "custom";
      searchParams["customUrl"] = "http://localhost:8899";
    } else {
      searchParams["cluster"] = cluster;
    }
  }
  let baseUrl = "";
  if (linkType === "address") {
    baseUrl = `https://explorer.solana.com/address/${id}`;
  }
  if (linkType === "transaction" || linkType === "tx") {
    baseUrl = `https://explorer.solana.com/tx/${id}`;
  }
  if (linkType === "block") {
    baseUrl = `https://explorer.solana.com/block/${id}`;
  }
  return encodeURL(baseUrl, searchParams);
};
var getKeypairFromFile = async (filepath) => {
  if (!filepath) {
    filepath = DEFAULT_FILEPATH;
  }
  if (filepath[0] === "~") {
    const home = process.env.HOME || null;
    if (home) {
      filepath = import_path.default.join(home, filepath.slice(1));
    }
  }
  let fileContents;
  try {
    const fileContentsBuffer = await (0, import_promises.readFile)(filepath);
    fileContents = fileContentsBuffer.toString();
  } catch (error) {
    throw new Error(`Could not read keypair from file at '${filepath}'`);
  }
  let parsedFileContents;
  try {
    parsedFileContents = Uint8Array.from(JSON.parse(fileContents));
  } catch (thrownObject) {
    const error = thrownObject;
    if (!error.message.includes("Unexpected token")) {
      throw error;
    }
    throw new Error(`Invalid secret key file at '${filepath}'!`);
  }
  return import_web3.Keypair.fromSecretKey(parsedFileContents);
};
var getKeypairFromEnvironment = (variableName) => {
  const secretKeyString = process.env[variableName];
  if (!secretKeyString) {
    throw new Error(`Please set '${variableName}' in environment.`);
  }
  let decodedSecretKey;
  try {
    decodedSecretKey = import_bs58.default.decode(secretKeyString);
    return import_web3.Keypair.fromSecretKey(decodedSecretKey);
  } catch (throwObject) {
    const error = throwObject;
    if (!error.message.includes("Non-base58 character")) {
      throw new Error(
        `Invalid secret key in environment variable '${variableName}'!`
      );
    }
  }
  try {
    decodedSecretKey = Uint8Array.from(JSON.parse(secretKeyString));
  } catch (error) {
    throw new Error(
      `Invalid secret key in environment variable '${variableName}'!`
    );
  }
  return import_web3.Keypair.fromSecretKey(decodedSecretKey);
};
var addKeypairToEnvFile = async (keypair, variableName, fileName) => {
  if (!fileName) {
    fileName = ".env";
  }
  const existingSecretKey = process.env[variableName];
  if (existingSecretKey) {
    throw new Error(`'${variableName}' already exists in env file.`);
  }
  const secretKeyString = keypairToSecretKeyJSON(keypair);
  await (0, import_promises.appendFile)(fileName, `
${variableName}=${secretKeyString}`);
};
var requestAndConfirmAirdrop = async (connection, publicKey, amount) => {
  let airdropTransactionSignature = await connection.requestAirdrop(
    publicKey,
    amount
  );
  const latestBlockHash = await connection.getLatestBlockhash();
  await connection.confirmTransaction(
    {
      blockhash: latestBlockHash.blockhash,
      lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,
      signature: airdropTransactionSignature
    },
    "confirmed"
  );
  return connection.getBalance(publicKey, "confirmed");
};
var requestAndConfirmAirdropIfRequired = async (connection, publicKey, airdropAmount, minimumBalance) => {
  const balance = await connection.getBalance(publicKey, "confirmed");
  if (balance < minimumBalance) {
    return requestAndConfirmAirdrop(connection, publicKey, airdropAmount);
  }
  return balance;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addKeypairToEnvFile,
  getCustomErrorMessage,
  getExplorerLink,
  getKeypairFromEnvironment,
  getKeypairFromFile,
  keypairToSecretKeyJSON,
  requestAndConfirmAirdrop,
  requestAndConfirmAirdropIfRequired
});
